datasource db {
  provider = "postgresql"
  url      = env("DB_PRISMA_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  mobile           Int       @unique
  type             String //Admin, Internal, External
  active           Boolean   @default(true)
  password         String // Hashed password
  resourceLimit    Int       @default(5)
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  orders           Order[]
}

model ResourceType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  resources Resource[]
}

model Resource {
  id              Int          @id @default(autoincrement())
  resourceTypeId  Int
  name            String       @unique
  // imageUrl       String       //store image elsewhere and give Image url
  // imageBlob      Bytes        //store image
  maxQty          Int          @default(1)
  priceInternal   Int
  priceExternal   Int
  bookingType     String
  active          Boolean
  resourceType    ResourceType @relation(fields: [resourceTypeId], references: [id])
  requireApproval Boolean      @default(true)
  // bookingTypes   BookingType  @relation(fields: [bookingType], references: [id])
  orders          Order[]
}

// model BookingType {
//   id         Int        @id @default(autoincrement())
//   type       String // 2-hour, half-day, full-day
//   resourceId Int
//   resources  Resource[]
//   timeSlots  TimeSlot[]
// }

// model TimeSlot {
//   id            Int         @id @default(autoincrement())
//   slotName      String // 1, 2, 3, 4 (for 2-hour slots)
//   bookingType   String
//   orders        Order[]
// }

model Message {
  id             Int      @id @default(autoincrement())
  text           String
  sentBy         Int
  recepientType  String
  sentTo         Int
  readByReciever Boolean  @default(false)
  timestamp      DateTime @default(now())
  sender         User     @relation("SentMessages", fields: [sentBy], references: [id])
  reciever       User     @relation("ReceivedMessages", fields: [sentTo], references: [id])

  @@index([timestamp])
}

model Order {
  id            Int      @id @default(autoincrement())
  mode          String
  transactionId String
  bookingDate   DateTime
  amount        Int
  resourceId    Int
  resourceQty   Int
  bookingType   String
  timeSlot      String
  timestamp     DateTime
  userId        Int
  status        String
  user          User     @relation(fields: [userId], references: [id])
  resouece      Resource @relation(fields: [resourceId], references: [id])
}
